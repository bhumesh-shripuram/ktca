{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":86,"index":86}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dV3bI3NOD8bfMzaIniMaFGy/nn8=","exportNames":["*"]}},{"name":"./ExponentFileSystem","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":129},"end":{"line":4,"column":54,"index":183}}],"key":"tbodXBUo4AnFxXLy6Cw8fugp6m0=","exportNames":["*"]}},{"name":"./FileSystem.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":184},"end":{"line":26,"column":28,"index":708}}],"key":"ObN6HUwTXmTdPMczj1rSID1sDXs=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.cacheDirectory = exports.bundleDirectory = exports.UploadTask = exports.StorageAccessFramework = exports.FileSystemCancellableNetworkTask = exports.DownloadResumable = void 0;\n  exports.copyAsync = copyAsync;\n  exports.createDownloadResumable = createDownloadResumable;\n  exports.createUploadTask = createUploadTask;\n  exports.deleteAsync = deleteAsync;\n  exports.deleteLegacyDocumentDirectoryAndroid = deleteLegacyDocumentDirectoryAndroid;\n  exports.documentDirectory = void 0;\n  exports.downloadAsync = downloadAsync;\n  exports.getContentUriAsync = getContentUriAsync;\n  exports.getFreeDiskStorageAsync = getFreeDiskStorageAsync;\n  exports.getInfoAsync = getInfoAsync;\n  exports.getTotalDiskCapacityAsync = getTotalDiskCapacityAsync;\n  exports.makeDirectoryAsync = makeDirectoryAsync;\n  exports.moveAsync = moveAsync;\n  exports.readAsStringAsync = readAsStringAsync;\n  exports.readDirectoryAsync = readDirectoryAsync;\n  exports.uploadAsync = uploadAsync;\n  exports.writeAsStringAsync = writeAsStringAsync;\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _Platform = _interopRequireDefault(require(_dependencyMap[2], \"react-native-web/dist/exports/Platform\"));\n  var _ExponentFileSystem = _interopRequireDefault(require(_dependencyMap[3], \"./ExponentFileSystem\"));\n  var _FileSystem = require(_dependencyMap[4], \"./FileSystem.types\");\n  if (!_ExponentFileSystem.default) {\n    console.warn(\"No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?\");\n  }\n  function normalizeEndingSlash(p) {\n    if (p != null) {\n      return p.replace(/\\/*$/, '') + '/';\n    }\n    return null;\n  }\n\n  /**\n   * `file://` URI pointing to the directory where user documents for this app will be stored.\n   * Files stored here will remain until explicitly deleted by the app. Ends with a trailing `/`.\n   * Example uses are for files the user saves that they expect to see again.\n   */\n  const documentDirectory = exports.documentDirectory = normalizeEndingSlash(_ExponentFileSystem.default.documentDirectory);\n\n  /**\n   * `file://` URI pointing to the directory where temporary files used by this app will be stored.\n   * Files stored here may be automatically deleted by the system when low on storage.\n   * Example uses are for downloaded or generated files that the app just needs for one-time usage.\n   */\n  const cacheDirectory = exports.cacheDirectory = normalizeEndingSlash(_ExponentFileSystem.default.cacheDirectory);\n\n  /**\n   * URI to the directory where assets bundled with the application are stored.\n   */\n  const bundleDirectory = exports.bundleDirectory = normalizeEndingSlash(_ExponentFileSystem.default.bundleDirectory);\n\n  /**\n   * Get metadata information about a file, directory or external content/asset.\n   * @param fileUri URI to the file or directory. See [supported URI schemes](#supported-uri-schemes).\n   * @param options A map of options represented by [`InfoOptions`](#infooptions) type.\n   * @return A Promise that resolves to a `FileInfo` object. If no item exists at this URI,\n   * the returned Promise resolves to `FileInfo` object in form of `{ exists: false, isDirectory: false }`.\n   */\n  async function getInfoAsync(fileUri, options = {}) {\n    if (!_ExponentFileSystem.default.getInfoAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'getInfoAsync');\n    }\n    return await _ExponentFileSystem.default.getInfoAsync(fileUri, options);\n  }\n\n  /**\n   * Read the entire contents of a file as a string. Binary will be returned in raw format, you will need to append `data:image/png;base64,` to use it as Base64.\n   * @param fileUri `file://` or [SAF](#saf-uri) URI to the file or directory.\n   * @param options A map of read options represented by [`ReadingOptions`](#readingoptions) type.\n   * @return A Promise that resolves to a string containing the entire contents of the file.\n   */\n  async function readAsStringAsync(fileUri, options = {}) {\n    if (!_ExponentFileSystem.default.readAsStringAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'readAsStringAsync');\n    }\n    return await _ExponentFileSystem.default.readAsStringAsync(fileUri, options);\n  }\n\n  /**\n   * Takes a `file://` URI and converts it into content URI (`content://`) so that it can be accessed by other applications outside of Expo.\n   * @param fileUri The local URI of the file. If there is no file at this URI, an exception will be thrown.\n   * @example\n   * ```js\n   * FileSystem.getContentUriAsync(uri).then(cUri => {\n   *   console.log(cUri);\n   *   IntentLauncher.startActivityAsync('android.intent.action.VIEW', {\n   *     data: cUri,\n   *     flags: 1,\n   *   });\n   * });\n   * ```\n   * @return Returns a Promise that resolves to a `string` containing a `content://` URI pointing to the file.\n   * The URI is the same as the `fileUri` input parameter but in a different format.\n   * @platform android\n   */\n  async function getContentUriAsync(fileUri) {\n    if (_Platform.default.OS === 'android') {\n      if (!_ExponentFileSystem.default.getContentUriAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'getContentUriAsync');\n      }\n      return await _ExponentFileSystem.default.getContentUriAsync(fileUri);\n    } else {\n      return fileUri;\n    }\n  }\n\n  /**\n   * Write the entire contents of a file as a string.\n   * @param fileUri `file://` or [SAF](#saf-uri) URI to the file or directory.\n   * > Note: when you're using SAF URI the file needs to exist. You can't create a new file.\n   * @param contents The string to replace the contents of the file with.\n   * @param options A map of write options represented by [`WritingOptions`](#writingoptions) type.\n   */\n  async function writeAsStringAsync(fileUri, contents, options = {}) {\n    if (!_ExponentFileSystem.default.writeAsStringAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'writeAsStringAsync');\n    }\n    return await _ExponentFileSystem.default.writeAsStringAsync(fileUri, contents, options);\n  }\n\n  /**\n   * Delete a file or directory. If the URI points to a directory, the directory and all its contents are recursively deleted.\n   * @param fileUri `file://` or [SAF](#saf-uri) URI to the file or directory.\n   * @param options A map of write options represented by [`DeletingOptions`](#deletingoptions) type.\n   */\n  async function deleteAsync(fileUri, options = {}) {\n    if (!_ExponentFileSystem.default.deleteAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'deleteAsync');\n    }\n    return await _ExponentFileSystem.default.deleteAsync(fileUri, options);\n  }\n  async function deleteLegacyDocumentDirectoryAndroid() {\n    if (_Platform.default.OS !== 'android' || documentDirectory == null) {\n      return;\n    }\n    const legacyDocumentDirectory = `${documentDirectory}ExperienceData/`;\n    return await deleteAsync(legacyDocumentDirectory, {\n      idempotent: true\n    });\n  }\n\n  /**\n   * Move a file or directory to a new location.\n   * @param options A map of move options represented by [`RelocatingOptions`](#relocatingoptions) type.\n   */\n  async function moveAsync(options) {\n    if (!_ExponentFileSystem.default.moveAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'moveAsync');\n    }\n    return await _ExponentFileSystem.default.moveAsync(options);\n  }\n\n  /**\n   * Create a copy of a file or directory. Directories are recursively copied with all of their contents.\n   * It can be also used to copy content shared by other apps to local filesystem.\n   * @param options A map of move options represented by [`RelocatingOptions`](#relocatingoptions) type.\n   */\n  async function copyAsync(options) {\n    if (!_ExponentFileSystem.default.copyAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'copyAsync');\n    }\n    return await _ExponentFileSystem.default.copyAsync(options);\n  }\n\n  /**\n   * Create a new empty directory.\n   * @param fileUri `file://` URI to the new directory to create.\n   * @param options A map of create directory options represented by [`MakeDirectoryOptions`](#makedirectoryoptions) type.\n   */\n  async function makeDirectoryAsync(fileUri, options = {}) {\n    if (!_ExponentFileSystem.default.makeDirectoryAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'makeDirectoryAsync');\n    }\n    return await _ExponentFileSystem.default.makeDirectoryAsync(fileUri, options);\n  }\n\n  /**\n   * Enumerate the contents of a directory.\n   * @param fileUri `file://` URI to the directory.\n   * @return A Promise that resolves to an array of strings, each containing the name of a file or directory contained in the directory at `fileUri`.\n   */\n  async function readDirectoryAsync(fileUri) {\n    if (!_ExponentFileSystem.default.readDirectoryAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'readDirectoryAsync');\n    }\n    return await _ExponentFileSystem.default.readDirectoryAsync(fileUri);\n  }\n\n  /**\n   * Gets the available internal disk storage size, in bytes. This returns the free space on the data partition that hosts all of the internal storage for all apps on the device.\n   * @return Returns a Promise that resolves to the number of bytes available on the internal disk.\n   */\n  async function getFreeDiskStorageAsync() {\n    if (!_ExponentFileSystem.default.getFreeDiskStorageAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'getFreeDiskStorageAsync');\n    }\n    return await _ExponentFileSystem.default.getFreeDiskStorageAsync();\n  }\n\n  /**\n   * Gets total internal disk storage size, in bytes. This is the total capacity of the data partition that hosts all the internal storage for all apps on the device.\n   * @return Returns a Promise that resolves to a number that specifies the total internal disk storage capacity in bytes.\n   */\n  async function getTotalDiskCapacityAsync() {\n    if (!_ExponentFileSystem.default.getTotalDiskCapacityAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'getTotalDiskCapacityAsync');\n    }\n    return await _ExponentFileSystem.default.getTotalDiskCapacityAsync();\n  }\n\n  /**\n   * Download the contents at a remote URI to a file in the app's file system. The directory for a local file uri must exist prior to calling this function.\n   * @param uri The remote URI to download from.\n   * @param fileUri The local URI of the file to download to. If there is no file at this URI, a new one is created.\n   * If there is a file at this URI, its contents are replaced. The directory for the file must exist.\n   * @param options A map of download options represented by [`DownloadOptions`](#downloadoptions) type.\n   * @example\n   * ```js\n   * FileSystem.downloadAsync(\n   *   'http://techslides.com/demos/sample-videos/small.mp4',\n   *   FileSystem.documentDirectory + 'small.mp4'\n   * )\n   *   .then(({ uri }) => {\n   *     console.log('Finished downloading to ', uri);\n   *   })\n   *   .catch(error => {\n   *     console.error(error);\n   *   });\n   * ```\n   * @return Returns a Promise that resolves to a `FileSystemDownloadResult` object.\n   */\n  async function downloadAsync(uri, fileUri, options = {}) {\n    if (!_ExponentFileSystem.default.downloadAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'downloadAsync');\n    }\n    return await _ExponentFileSystem.default.downloadAsync(uri, fileUri, {\n      sessionType: _FileSystem.FileSystemSessionType.BACKGROUND,\n      ...options\n    });\n  }\n\n  /**\n   * Upload the contents of the file pointed by `fileUri` to the remote url.\n   * @param url The remote URL, where the file will be sent.\n   * @param fileUri The local URI of the file to send. The file must exist.\n   * @param options A map of download options represented by [`FileSystemUploadOptions`](#filesystemuploadoptions) type.\n   * @example\n   * **Client**\n   *\n   * ```js\n   * import * as FileSystem from 'expo-file-system';\n   *\n   * try {\n   *   const response = await FileSystem.uploadAsync(`http://192.168.0.1:1234/binary-upload`, fileUri, {\n   *     fieldName: 'file',\n   *     httpMethod: 'PATCH',\n   *     uploadType: FileSystem.FileSystemUploadType.BINARY_CONTENT,\n   *   });\n   *   console.log(JSON.stringify(response, null, 4));\n   * } catch (error) {\n   *   console.log(error);\n   * }\n   * ```\n   *\n   * **Server**\n   *\n   * Refer to the \"[Server: Handling multipart requests](#server-handling-multipart-requests)\" example - there is code for a simple Node.js server.\n   * @return Returns a Promise that resolves to `FileSystemUploadResult` object.\n   */\n  async function uploadAsync(url, fileUri, options = {}) {\n    if (!_ExponentFileSystem.default.uploadAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'uploadAsync');\n    }\n    return await _ExponentFileSystem.default.uploadAsync(url, fileUri, {\n      sessionType: _FileSystem.FileSystemSessionType.BACKGROUND,\n      uploadType: _FileSystem.FileSystemUploadType.BINARY_CONTENT,\n      ...options,\n      httpMethod: (options.httpMethod || 'POST').toUpperCase()\n    });\n  }\n\n  /**\n   * Create a `DownloadResumable` object which can start, pause, and resume a download of contents at a remote URI to a file in the app's file system.\n   * > Note: You need to call `downloadAsync()`, on a `DownloadResumable` instance to initiate the download.\n   * The `DownloadResumable` object has a callback that provides download progress updates.\n   * Downloads can be resumed across app restarts by using `AsyncStorage` to store the `DownloadResumable.savable()` object for later retrieval.\n   * The `savable` object contains the arguments required to initialize a new `DownloadResumable` object to resume the download after an app restart.\n   * The directory for a local file uri must exist prior to calling this function.\n   * @param uri The remote URI to download from.\n   * @param fileUri The local URI of the file to download to. If there is no file at this URI, a new one is created.\n   * If there is a file at this URI, its contents are replaced. The directory for the file must exist.\n   * @param options A map of download options represented by [`DownloadOptions`](#downloadoptions) type.\n   * @param callback This function is called on each data write to update the download progress.\n   * > **Note**: When the app has been moved to the background, this callback won't be fired until it's moved to the foreground.\n   * @param resumeData The string which allows the api to resume a paused download. This is set on the `DownloadResumable` object automatically when a download is paused.\n   * When initializing a new `DownloadResumable` this should be `null`.\n   */\n  function createDownloadResumable(uri, fileUri, options, callback, resumeData) {\n    return new DownloadResumable(uri, fileUri, options, callback, resumeData);\n  }\n  function createUploadTask(url, fileUri, options, callback) {\n    return new UploadTask(url, fileUri, options, callback);\n  }\n  class FileSystemCancellableNetworkTask {\n    _uuid = _expoModulesCore.uuid.v4();\n    taskWasCanceled = false;\n    // @docsMissing\n    async cancelAsync() {\n      if (!_ExponentFileSystem.default.networkTaskCancelAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'networkTaskCancelAsync');\n      }\n      this.removeSubscription();\n      this.taskWasCanceled = true;\n      return await _ExponentFileSystem.default.networkTaskCancelAsync(this.uuid);\n    }\n    isTaskCancelled() {\n      if (this.taskWasCanceled) {\n        console.warn('This task was already canceled.');\n        return true;\n      }\n      return false;\n    }\n    get uuid() {\n      return this._uuid;\n    }\n    addSubscription() {\n      if (this.subscription) {\n        return;\n      }\n      this.subscription = _ExponentFileSystem.default.addListener(this.getEventName(), event => {\n        if (event.uuid === this.uuid) {\n          const callback = this.getCallback();\n          if (callback) {\n            callback(event.data);\n          }\n        }\n      });\n    }\n    removeSubscription() {\n      if (!this.subscription) {\n        return;\n      }\n      this.subscription.remove();\n      this.subscription = null;\n    }\n  }\n  exports.FileSystemCancellableNetworkTask = FileSystemCancellableNetworkTask;\n  class UploadTask extends FileSystemCancellableNetworkTask {\n    constructor(url, fileUri, options, callback) {\n      super();\n      this.url = url;\n      this.fileUri = fileUri;\n      this.callback = callback;\n      const httpMethod = options?.httpMethod?.toUpperCase() || 'POST';\n      this.options = {\n        sessionType: _FileSystem.FileSystemSessionType.BACKGROUND,\n        uploadType: _FileSystem.FileSystemUploadType.BINARY_CONTENT,\n        ...options,\n        httpMethod\n      };\n    }\n    getEventName() {\n      return 'expo-file-system.uploadProgress';\n    }\n    getCallback() {\n      return this.callback;\n    }\n\n    // @docsMissing\n    async uploadAsync() {\n      if (!_ExponentFileSystem.default.uploadTaskStartAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'uploadTaskStartAsync');\n      }\n      if (this.isTaskCancelled()) {\n        return;\n      }\n      this.addSubscription();\n      const result = await _ExponentFileSystem.default.uploadTaskStartAsync(this.url, this.fileUri, this.uuid, this.options);\n      this.removeSubscription();\n      return result;\n    }\n  }\n  exports.UploadTask = UploadTask;\n  class DownloadResumable extends FileSystemCancellableNetworkTask {\n    constructor(url, _fileUri, options = {}, callback, resumeData) {\n      super();\n      this.url = url;\n      this._fileUri = _fileUri;\n      this.options = options;\n      this.callback = callback;\n      this.resumeData = resumeData;\n    }\n    get fileUri() {\n      return this._fileUri;\n    }\n    getEventName() {\n      return 'expo-file-system.downloadProgress';\n    }\n    getCallback() {\n      return this.callback;\n    }\n\n    /**\n     * Download the contents at a remote URI to a file in the app's file system.\n     * @return Returns a Promise that resolves to `FileSystemDownloadResult` object, or to `undefined` when task was cancelled.\n     */\n    async downloadAsync() {\n      if (!_ExponentFileSystem.default.downloadResumableStartAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n      }\n      if (this.isTaskCancelled()) {\n        return;\n      }\n      this.addSubscription();\n      return await _ExponentFileSystem.default.downloadResumableStartAsync(this.url, this._fileUri, this.uuid, this.options, this.resumeData);\n    }\n\n    /**\n     * Pause the current download operation. `resumeData` is added to the `DownloadResumable` object after a successful pause operation.\n     * Returns an object that can be saved with `AsyncStorage` for future retrieval (the same object that is returned from calling `FileSystem.DownloadResumable.savable()`).\n     * @return Returns a Promise that resolves to `DownloadPauseState` object.\n     */\n    async pauseAsync() {\n      if (!_ExponentFileSystem.default.downloadResumablePauseAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');\n      }\n      if (this.isTaskCancelled()) {\n        return {\n          fileUri: this._fileUri,\n          options: this.options,\n          url: this.url\n        };\n      }\n      const pauseResult = await _ExponentFileSystem.default.downloadResumablePauseAsync(this.uuid);\n      this.removeSubscription();\n      if (pauseResult) {\n        this.resumeData = pauseResult.resumeData;\n        return this.savable();\n      } else {\n        throw new Error('Unable to generate a savable pause state');\n      }\n    }\n\n    /**\n     * Resume a paused download operation.\n     * @return Returns a Promise that resolves to `FileSystemDownloadResult` object, or to `undefined` when task was cancelled.\n     */\n    async resumeAsync() {\n      if (!_ExponentFileSystem.default.downloadResumableStartAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n      }\n      if (this.isTaskCancelled()) {\n        return;\n      }\n      this.addSubscription();\n      return await _ExponentFileSystem.default.downloadResumableStartAsync(this.url, this.fileUri, this.uuid, this.options, this.resumeData);\n    }\n\n    /**\n     * Method to get the object which can be saved with `AsyncStorage` for future retrieval.\n     * @returns Returns object in shape of `DownloadPauseState` type.\n     */\n    savable() {\n      return {\n        url: this.url,\n        fileUri: this.fileUri,\n        options: this.options,\n        resumeData: this.resumeData\n      };\n    }\n  }\n  exports.DownloadResumable = DownloadResumable;\n  const baseReadAsStringAsync = readAsStringAsync;\n  const baseWriteAsStringAsync = writeAsStringAsync;\n  const baseDeleteAsync = deleteAsync;\n  const baseMoveAsync = moveAsync;\n  const baseCopyAsync = copyAsync;\n\n  /**\n   * The `StorageAccessFramework` is a namespace inside of the `expo-file-system` module, which encapsulates all functions which can be used with [SAF URIs](#saf-uri).\n   * You can read more about SAF in the [Android documentation](https://developer.android.com/guide/topics/providers/document-provider).\n   *\n   * @example\n   * # Basic Usage\n   *\n   * ```ts\n   * import { StorageAccessFramework } from 'expo-file-system';\n   *\n   * // Requests permissions for external directory\n   * const permissions = await StorageAccessFramework.requestDirectoryPermissionsAsync();\n   *\n   * if (permissions.granted) {\n   *   // Gets SAF URI from response\n   *   const uri = permissions.directoryUri;\n   *\n   *   // Gets all files inside of selected directory\n   *   const files = await StorageAccessFramework.readDirectoryAsync(uri);\n   *   alert(`Files inside ${uri}:\\n\\n${JSON.stringify(files)}`);\n   * }\n   * ```\n   *\n   * # Migrating an album\n   *\n   * ```ts\n   * import * as MediaLibrary from 'expo-media-library';\n   * import * as FileSystem from 'expo-file-system';\n   * const { StorageAccessFramework } = FileSystem;\n   *\n   * async function migrateAlbum(albumName: string) {\n   *   // Gets SAF URI to the album\n   *   const albumUri = StorageAccessFramework.getUriForDirectoryInRoot(albumName);\n   *\n   *   // Requests permissions\n   *   const permissions = await StorageAccessFramework.requestDirectoryPermissionsAsync(albumUri);\n   *   if (!permissions.granted) {\n   *     return;\n   *   }\n   *\n   *   const permittedUri = permissions.directoryUri;\n   *   // Checks if users selected the correct folder\n   *   if (!permittedUri.includes(albumName)) {\n   *     return;\n   *   }\n   *\n   *   const mediaLibraryPermissions = await MediaLibrary.requestPermissionsAsync();\n   *   if (!mediaLibraryPermissions.granted) {\n   *     return;\n   *   }\n   *\n   *   // Moves files from external storage to internal storage\n   *   await StorageAccessFramework.moveAsync({\n   *     from: permittedUri,\n   *     to: FileSystem.documentDirectory!,\n   *   });\n   *\n   *   const outputDir = FileSystem.documentDirectory! + albumName;\n   *   const migratedFiles = await FileSystem.readDirectoryAsync(outputDir);\n   *\n   *   // Creates assets from local files\n   *   const [newAlbumCreator, ...assets] = await Promise.all(\n   *     migratedFiles.map<Promise<MediaLibrary.Asset>>(\n   *       async fileName => await MediaLibrary.createAssetAsync(outputDir + '/' + fileName)\n   *     )\n   *   );\n   *\n   *   // Album was empty\n   *   if (!newAlbumCreator) {\n   *     return;\n   *   }\n   *\n   *   // Creates a new album in the scoped directory\n   *   const newAlbum = await MediaLibrary.createAlbumAsync(albumName, newAlbumCreator, false);\n   *   if (assets.length) {\n   *     await MediaLibrary.addAssetsToAlbumAsync(assets, newAlbum, false);\n   *   }\n   * }\n   * ```\n   * @platform Android\n   */\n  let StorageAccessFramework = exports.StorageAccessFramework = void 0;\n  (function (_StorageAccessFramework) {\n    function getUriForDirectoryInRoot(folderName) {\n      return `content://com.android.externalstorage.documents/tree/primary:${folderName}/document/primary:${folderName}`;\n    }\n    _StorageAccessFramework.getUriForDirectoryInRoot = getUriForDirectoryInRoot;\n    async function requestDirectoryPermissionsAsync(initialFileUrl = null) {\n      if (!_ExponentFileSystem.default.requestDirectoryPermissionsAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'StorageAccessFramework.requestDirectoryPermissionsAsync');\n      }\n      return await _ExponentFileSystem.default.requestDirectoryPermissionsAsync(initialFileUrl);\n    }\n    _StorageAccessFramework.requestDirectoryPermissionsAsync = requestDirectoryPermissionsAsync;\n    async function readDirectoryAsync(dirUri) {\n      if (!_ExponentFileSystem.default.readSAFDirectoryAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'StorageAccessFramework.readDirectoryAsync');\n      }\n      return await _ExponentFileSystem.default.readSAFDirectoryAsync(dirUri);\n    }\n    _StorageAccessFramework.readDirectoryAsync = readDirectoryAsync;\n    async function makeDirectoryAsync(parentUri, dirName) {\n      if (!_ExponentFileSystem.default.makeSAFDirectoryAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'StorageAccessFramework.makeDirectoryAsync');\n      }\n      return await _ExponentFileSystem.default.makeSAFDirectoryAsync(parentUri, dirName);\n    }\n    _StorageAccessFramework.makeDirectoryAsync = makeDirectoryAsync;\n    async function createFileAsync(parentUri, fileName, mimeType) {\n      if (!_ExponentFileSystem.default.createSAFFileAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'StorageAccessFramework.createFileAsync');\n      }\n      return await _ExponentFileSystem.default.createSAFFileAsync(parentUri, fileName, mimeType);\n    }\n    _StorageAccessFramework.createFileAsync = createFileAsync;\n    const writeAsStringAsync = _StorageAccessFramework.writeAsStringAsync = baseWriteAsStringAsync;\n    const readAsStringAsync = _StorageAccessFramework.readAsStringAsync = baseReadAsStringAsync;\n    const deleteAsync = _StorageAccessFramework.deleteAsync = baseDeleteAsync;\n    const moveAsync = _StorageAccessFramework.moveAsync = baseMoveAsync;\n    const copyAsync = _StorageAccessFramework.copyAsync = baseCopyAsync;\n  })(StorageAccessFramework || (exports.StorageAccessFramework = StorageAccessFramework = {}));\n});","lineCount":605,"map":[[24,2,1,0],[24,6,1,0,"_expoModulesCore"],[24,22,1,0],[24,25,1,0,"require"],[24,32,1,0],[24,33,1,0,"_dependencyMap"],[24,47,1,0],[25,2,1,86],[25,6,1,86,"_Platform"],[25,15,1,86],[25,18,1,86,"_interopRequireDefault"],[25,40,1,86],[25,41,1,86,"require"],[25,48,1,86],[25,49,1,86,"_dependencyMap"],[25,63,1,86],[26,2,4,0],[26,6,4,0,"_ExponentFileSystem"],[26,25,4,0],[26,28,4,0,"_interopRequireDefault"],[26,50,4,0],[26,51,4,0,"require"],[26,58,4,0],[26,59,4,0,"_dependencyMap"],[26,73,4,0],[27,2,5,0],[27,6,5,0,"_FileSystem"],[27,17,5,0],[27,20,5,0,"require"],[27,27,5,0],[27,28,5,0,"_dependencyMap"],[27,42,5,0],[28,2,28,0],[28,6,28,4],[28,7,28,5,"ExponentFileSystem"],[28,34,28,23],[28,36,28,25],[29,4,29,2,"console"],[29,11,29,9],[29,12,29,10,"warn"],[29,16,29,14],[29,17,30,4],[29,124,31,2],[29,125,31,3],[30,2,32,0],[31,2,34,0],[31,11,34,9,"normalizeEndingSlash"],[31,31,34,29,"normalizeEndingSlash"],[31,32,34,30,"p"],[31,33,34,46],[31,35,34,63],[32,4,35,2],[32,8,35,6,"p"],[32,9,35,7],[32,13,35,11],[32,17,35,15],[32,19,35,17],[33,6,36,4],[33,13,36,11,"p"],[33,14,36,12],[33,15,36,13,"replace"],[33,22,36,20],[33,23,36,21],[33,29,36,27],[33,31,36,29],[33,33,36,31],[33,34,36,32],[33,37,36,35],[33,40,36,38],[34,4,37,2],[35,4,38,2],[35,11,38,9],[35,15,38,13],[36,2,39,0],[38,2,41,0],[39,0,42,0],[40,0,43,0],[41,0,44,0],[42,0,45,0],[43,2,46,7],[43,8,46,13,"documentDirectory"],[43,25,46,30],[43,28,46,30,"exports"],[43,35,46,30],[43,36,46,30,"documentDirectory"],[43,53,46,30],[43,56,46,33,"normalizeEndingSlash"],[43,76,46,53],[43,77,46,54,"ExponentFileSystem"],[43,104,46,72],[43,105,46,73,"documentDirectory"],[43,122,46,90],[43,123,46,91],[45,2,48,0],[46,0,49,0],[47,0,50,0],[48,0,51,0],[49,0,52,0],[50,2,53,7],[50,8,53,13,"cacheDirectory"],[50,22,53,27],[50,25,53,27,"exports"],[50,32,53,27],[50,33,53,27,"cacheDirectory"],[50,47,53,27],[50,50,53,30,"normalizeEndingSlash"],[50,70,53,50],[50,71,53,51,"ExponentFileSystem"],[50,98,53,69],[50,99,53,70,"cacheDirectory"],[50,113,53,84],[50,114,53,85],[52,2,55,0],[53,0,56,0],[54,0,57,0],[55,2,58,7],[55,8,58,13,"bundleDirectory"],[55,23,58,28],[55,26,58,28,"exports"],[55,33,58,28],[55,34,58,28,"bundleDirectory"],[55,49,58,28],[55,52,58,31,"normalizeEndingSlash"],[55,72,58,51],[55,73,58,52,"ExponentFileSystem"],[55,100,58,70],[55,101,58,71,"bundleDirectory"],[55,116,58,86],[55,117,58,87],[57,2,60,0],[58,0,61,0],[59,0,62,0],[60,0,63,0],[61,0,64,0],[62,0,65,0],[63,0,66,0],[64,2,67,7],[64,17,67,22,"getInfoAsync"],[64,29,67,34,"getInfoAsync"],[64,30,67,35,"fileUri"],[64,37,67,50],[64,39,67,52,"options"],[64,46,67,72],[64,49,67,75],[64,50,67,76],[64,51,67,77],[64,53,67,98],[65,4,68,2],[65,8,68,6],[65,9,68,7,"ExponentFileSystem"],[65,36,68,25],[65,37,68,26,"getInfoAsync"],[65,49,68,38],[65,51,68,40],[66,6,69,4],[66,12,69,10],[66,16,69,14,"UnavailabilityError"],[66,52,69,33],[66,53,69,34],[66,71,69,52],[66,73,69,54],[66,87,69,68],[66,88,69,69],[67,4,70,2],[68,4,71,2],[68,11,71,9],[68,17,71,15,"ExponentFileSystem"],[68,44,71,33],[68,45,71,34,"getInfoAsync"],[68,57,71,46],[68,58,71,47,"fileUri"],[68,65,71,54],[68,67,71,56,"options"],[68,74,71,63],[68,75,71,64],[69,2,72,0],[71,2,74,0],[72,0,75,0],[73,0,76,0],[74,0,77,0],[75,0,78,0],[76,0,79,0],[77,2,80,7],[77,17,80,22,"readAsStringAsync"],[77,34,80,39,"readAsStringAsync"],[77,35,81,2,"fileUri"],[77,42,81,17],[77,44,82,2,"options"],[77,51,82,25],[77,54,82,28],[77,55,82,29],[77,56,82,30],[77,58,83,19],[78,4,84,2],[78,8,84,6],[78,9,84,7,"ExponentFileSystem"],[78,36,84,25],[78,37,84,26,"readAsStringAsync"],[78,54,84,43],[78,56,84,45],[79,6,85,4],[79,12,85,10],[79,16,85,14,"UnavailabilityError"],[79,52,85,33],[79,53,85,34],[79,71,85,52],[79,73,85,54],[79,92,85,73],[79,93,85,74],[80,4,86,2],[81,4,87,2],[81,11,87,9],[81,17,87,15,"ExponentFileSystem"],[81,44,87,33],[81,45,87,34,"readAsStringAsync"],[81,62,87,51],[81,63,87,52,"fileUri"],[81,70,87,59],[81,72,87,61,"options"],[81,79,87,68],[81,80,87,69],[82,2,88,0],[84,2,90,0],[85,0,91,0],[86,0,92,0],[87,0,93,0],[88,0,94,0],[89,0,95,0],[90,0,96,0],[91,0,97,0],[92,0,98,0],[93,0,99,0],[94,0,100,0],[95,0,101,0],[96,0,102,0],[97,0,103,0],[98,0,104,0],[99,0,105,0],[100,0,106,0],[101,2,107,7],[101,17,107,22,"getContentUriAsync"],[101,35,107,40,"getContentUriAsync"],[101,36,107,41,"fileUri"],[101,43,107,56],[101,45,107,75],[102,4,108,2],[102,8,108,6,"Platform"],[102,25,108,14],[102,26,108,15,"OS"],[102,28,108,17],[102,33,108,22],[102,42,108,31],[102,44,108,33],[103,6,109,4],[103,10,109,8],[103,11,109,9,"ExponentFileSystem"],[103,38,109,27],[103,39,109,28,"getContentUriAsync"],[103,57,109,46],[103,59,109,48],[104,8,110,6],[104,14,110,12],[104,18,110,16,"UnavailabilityError"],[104,54,110,35],[104,55,110,36],[104,73,110,54],[104,75,110,56],[104,95,110,76],[104,96,110,77],[105,6,111,4],[106,6,112,4],[106,13,112,11],[106,19,112,17,"ExponentFileSystem"],[106,46,112,35],[106,47,112,36,"getContentUriAsync"],[106,65,112,54],[106,66,112,55,"fileUri"],[106,73,112,62],[106,74,112,63],[107,4,113,2],[107,5,113,3],[107,11,113,9],[108,6,114,4],[108,13,114,11,"fileUri"],[108,20,114,18],[109,4,115,2],[110,2,116,0],[112,2,118,0],[113,0,119,0],[114,0,120,0],[115,0,121,0],[116,0,122,0],[117,0,123,0],[118,0,124,0],[119,2,125,7],[119,17,125,22,"writeAsStringAsync"],[119,35,125,40,"writeAsStringAsync"],[119,36,126,2,"fileUri"],[119,43,126,17],[119,45,127,2,"contents"],[119,53,127,18],[119,55,128,2,"options"],[119,62,128,25],[119,65,128,28],[119,66,128,29],[119,67,128,30],[119,69,129,17],[120,4,130,2],[120,8,130,6],[120,9,130,7,"ExponentFileSystem"],[120,36,130,25],[120,37,130,26,"writeAsStringAsync"],[120,55,130,44],[120,57,130,46],[121,6,131,4],[121,12,131,10],[121,16,131,14,"UnavailabilityError"],[121,52,131,33],[121,53,131,34],[121,71,131,52],[121,73,131,54],[121,93,131,74],[121,94,131,75],[122,4,132,2],[123,4,133,2],[123,11,133,9],[123,17,133,15,"ExponentFileSystem"],[123,44,133,33],[123,45,133,34,"writeAsStringAsync"],[123,63,133,52],[123,64,133,53,"fileUri"],[123,71,133,60],[123,73,133,62,"contents"],[123,81,133,70],[123,83,133,72,"options"],[123,90,133,79],[123,91,133,80],[124,2,134,0],[126,2,136,0],[127,0,137,0],[128,0,138,0],[129,0,139,0],[130,0,140,0],[131,2,141,7],[131,17,141,22,"deleteAsync"],[131,28,141,33,"deleteAsync"],[131,29,141,34,"fileUri"],[131,36,141,49],[131,38,141,51,"options"],[131,45,141,75],[131,48,141,78],[131,49,141,79],[131,50,141,80],[131,52,141,97],[132,4,142,2],[132,8,142,6],[132,9,142,7,"ExponentFileSystem"],[132,36,142,25],[132,37,142,26,"deleteAsync"],[132,48,142,37],[132,50,142,39],[133,6,143,4],[133,12,143,10],[133,16,143,14,"UnavailabilityError"],[133,52,143,33],[133,53,143,34],[133,71,143,52],[133,73,143,54],[133,86,143,67],[133,87,143,68],[134,4,144,2],[135,4,145,2],[135,11,145,9],[135,17,145,15,"ExponentFileSystem"],[135,44,145,33],[135,45,145,34,"deleteAsync"],[135,56,145,45],[135,57,145,46,"fileUri"],[135,64,145,53],[135,66,145,55,"options"],[135,73,145,62],[135,74,145,63],[136,2,146,0],[137,2,148,7],[137,17,148,22,"deleteLegacyDocumentDirectoryAndroid"],[137,53,148,58,"deleteLegacyDocumentDirectoryAndroid"],[137,54,148,58],[137,56,148,76],[138,4,149,2],[138,8,149,6,"Platform"],[138,25,149,14],[138,26,149,15,"OS"],[138,28,149,17],[138,33,149,22],[138,42,149,31],[138,46,149,35,"documentDirectory"],[138,63,149,52],[138,67,149,56],[138,71,149,60],[138,73,149,62],[139,6,150,4],[140,4,151,2],[141,4,152,2],[141,10,152,8,"legacyDocumentDirectory"],[141,33,152,31],[141,36,152,34],[141,39,152,37,"documentDirectory"],[141,56,152,54],[141,73,152,71],[142,4,153,2],[142,11,153,9],[142,17,153,15,"deleteAsync"],[142,28,153,26],[142,29,153,27,"legacyDocumentDirectory"],[142,52,153,50],[142,54,153,52],[143,6,153,54,"idempotent"],[143,16,153,64],[143,18,153,66],[144,4,153,71],[144,5,153,72],[144,6,153,73],[145,2,154,0],[147,2,156,0],[148,0,157,0],[149,0,158,0],[150,0,159,0],[151,2,160,7],[151,17,160,22,"moveAsync"],[151,26,160,31,"moveAsync"],[151,27,160,32,"options"],[151,34,160,58],[151,36,160,75],[152,4,161,2],[152,8,161,6],[152,9,161,7,"ExponentFileSystem"],[152,36,161,25],[152,37,161,26,"moveAsync"],[152,46,161,35],[152,48,161,37],[153,6,162,4],[153,12,162,10],[153,16,162,14,"UnavailabilityError"],[153,52,162,33],[153,53,162,34],[153,71,162,52],[153,73,162,54],[153,84,162,65],[153,85,162,66],[154,4,163,2],[155,4,164,2],[155,11,164,9],[155,17,164,15,"ExponentFileSystem"],[155,44,164,33],[155,45,164,34,"moveAsync"],[155,54,164,43],[155,55,164,44,"options"],[155,62,164,51],[155,63,164,52],[156,2,165,0],[158,2,167,0],[159,0,168,0],[160,0,169,0],[161,0,170,0],[162,0,171,0],[163,2,172,7],[163,17,172,22,"copyAsync"],[163,26,172,31,"copyAsync"],[163,27,172,32,"options"],[163,34,172,58],[163,36,172,75],[164,4,173,2],[164,8,173,6],[164,9,173,7,"ExponentFileSystem"],[164,36,173,25],[164,37,173,26,"copyAsync"],[164,46,173,35],[164,48,173,37],[165,6,174,4],[165,12,174,10],[165,16,174,14,"UnavailabilityError"],[165,52,174,33],[165,53,174,34],[165,71,174,52],[165,73,174,54],[165,84,174,65],[165,85,174,66],[166,4,175,2],[167,4,176,2],[167,11,176,9],[167,17,176,15,"ExponentFileSystem"],[167,44,176,33],[167,45,176,34,"copyAsync"],[167,54,176,43],[167,55,176,44,"options"],[167,62,176,51],[167,63,176,52],[168,2,177,0],[170,2,179,0],[171,0,180,0],[172,0,181,0],[173,0,182,0],[174,0,183,0],[175,2,184,7],[175,17,184,22,"makeDirectoryAsync"],[175,35,184,40,"makeDirectoryAsync"],[175,36,185,2,"fileUri"],[175,43,185,17],[175,45,186,2,"options"],[175,52,186,31],[175,55,186,34],[175,56,186,35],[175,57,186,36],[175,59,187,17],[176,4,188,2],[176,8,188,6],[176,9,188,7,"ExponentFileSystem"],[176,36,188,25],[176,37,188,26,"makeDirectoryAsync"],[176,55,188,44],[176,57,188,46],[177,6,189,4],[177,12,189,10],[177,16,189,14,"UnavailabilityError"],[177,52,189,33],[177,53,189,34],[177,71,189,52],[177,73,189,54],[177,93,189,74],[177,94,189,75],[178,4,190,2],[179,4,191,2],[179,11,191,9],[179,17,191,15,"ExponentFileSystem"],[179,44,191,33],[179,45,191,34,"makeDirectoryAsync"],[179,63,191,52],[179,64,191,53,"fileUri"],[179,71,191,60],[179,73,191,62,"options"],[179,80,191,69],[179,81,191,70],[180,2,192,0],[182,2,194,0],[183,0,195,0],[184,0,196,0],[185,0,197,0],[186,0,198,0],[187,2,199,7],[187,17,199,22,"readDirectoryAsync"],[187,35,199,40,"readDirectoryAsync"],[187,36,199,41,"fileUri"],[187,43,199,56],[187,45,199,77],[188,4,200,2],[188,8,200,6],[188,9,200,7,"ExponentFileSystem"],[188,36,200,25],[188,37,200,26,"readDirectoryAsync"],[188,55,200,44],[188,57,200,46],[189,6,201,4],[189,12,201,10],[189,16,201,14,"UnavailabilityError"],[189,52,201,33],[189,53,201,34],[189,71,201,52],[189,73,201,54],[189,93,201,74],[189,94,201,75],[190,4,202,2],[191,4,203,2],[191,11,203,9],[191,17,203,15,"ExponentFileSystem"],[191,44,203,33],[191,45,203,34,"readDirectoryAsync"],[191,63,203,52],[191,64,203,53,"fileUri"],[191,71,203,60],[191,72,203,61],[192,2,204,0],[194,2,206,0],[195,0,207,0],[196,0,208,0],[197,0,209,0],[198,2,210,7],[198,17,210,22,"getFreeDiskStorageAsync"],[198,40,210,45,"getFreeDiskStorageAsync"],[198,41,210,45],[198,43,210,65],[199,4,211,2],[199,8,211,6],[199,9,211,7,"ExponentFileSystem"],[199,36,211,25],[199,37,211,26,"getFreeDiskStorageAsync"],[199,60,211,49],[199,62,211,51],[200,6,212,4],[200,12,212,10],[200,16,212,14,"UnavailabilityError"],[200,52,212,33],[200,53,212,34],[200,71,212,52],[200,73,212,54],[200,98,212,79],[200,99,212,80],[201,4,213,2],[202,4,214,2],[202,11,214,9],[202,17,214,15,"ExponentFileSystem"],[202,44,214,33],[202,45,214,34,"getFreeDiskStorageAsync"],[202,68,214,57],[202,69,214,58],[202,70,214,59],[203,2,215,0],[205,2,217,0],[206,0,218,0],[207,0,219,0],[208,0,220,0],[209,2,221,7],[209,17,221,22,"getTotalDiskCapacityAsync"],[209,42,221,47,"getTotalDiskCapacityAsync"],[209,43,221,47],[209,45,221,67],[210,4,222,2],[210,8,222,6],[210,9,222,7,"ExponentFileSystem"],[210,36,222,25],[210,37,222,26,"getTotalDiskCapacityAsync"],[210,62,222,51],[210,64,222,53],[211,6,223,4],[211,12,223,10],[211,16,223,14,"UnavailabilityError"],[211,52,223,33],[211,53,223,34],[211,71,223,52],[211,73,223,54],[211,100,223,81],[211,101,223,82],[212,4,224,2],[213,4,225,2],[213,11,225,9],[213,17,225,15,"ExponentFileSystem"],[213,44,225,33],[213,45,225,34,"getTotalDiskCapacityAsync"],[213,70,225,59],[213,71,225,60],[213,72,225,61],[214,2,226,0],[216,2,228,0],[217,0,229,0],[218,0,230,0],[219,0,231,0],[220,0,232,0],[221,0,233,0],[222,0,234,0],[223,0,235,0],[224,0,236,0],[225,0,237,0],[226,0,238,0],[227,0,239,0],[228,0,240,0],[229,0,241,0],[230,0,242,0],[231,0,243,0],[232,0,244,0],[233,0,245,0],[234,0,246,0],[235,0,247,0],[236,0,248,0],[237,2,249,7],[237,17,249,22,"downloadAsync"],[237,30,249,35,"downloadAsync"],[237,31,250,2,"uri"],[237,34,250,13],[237,36,251,2,"fileUri"],[237,43,251,17],[237,45,252,2,"options"],[237,52,252,26],[237,55,252,29],[237,56,252,30],[237,57,252,31],[237,59,253,37],[238,4,254,2],[238,8,254,6],[238,9,254,7,"ExponentFileSystem"],[238,36,254,25],[238,37,254,26,"downloadAsync"],[238,50,254,39],[238,52,254,41],[239,6,255,4],[239,12,255,10],[239,16,255,14,"UnavailabilityError"],[239,52,255,33],[239,53,255,34],[239,71,255,52],[239,73,255,54],[239,88,255,69],[239,89,255,70],[240,4,256,2],[241,4,258,2],[241,11,258,9],[241,17,258,15,"ExponentFileSystem"],[241,44,258,33],[241,45,258,34,"downloadAsync"],[241,58,258,47],[241,59,258,48,"uri"],[241,62,258,51],[241,64,258,53,"fileUri"],[241,71,258,60],[241,73,258,62],[242,6,259,4,"sessionType"],[242,17,259,15],[242,19,259,17,"FileSystemSessionType"],[242,52,259,38],[242,53,259,39,"BACKGROUND"],[242,63,259,49],[243,6,260,4],[243,9,260,7,"options"],[244,4,261,2],[244,5,261,3],[244,6,261,4],[245,2,262,0],[247,2,264,0],[248,0,265,0],[249,0,266,0],[250,0,267,0],[251,0,268,0],[252,0,269,0],[253,0,270,0],[254,0,271,0],[255,0,272,0],[256,0,273,0],[257,0,274,0],[258,0,275,0],[259,0,276,0],[260,0,277,0],[261,0,278,0],[262,0,279,0],[263,0,280,0],[264,0,281,0],[265,0,282,0],[266,0,283,0],[267,0,284,0],[268,0,285,0],[269,0,286,0],[270,0,287,0],[271,0,288,0],[272,0,289,0],[273,0,290,0],[274,0,291,0],[275,2,292,7],[275,17,292,22,"uploadAsync"],[275,28,292,33,"uploadAsync"],[275,29,293,2,"url"],[275,32,293,13],[275,34,294,2,"fileUri"],[275,41,294,17],[275,43,295,2,"options"],[275,50,295,34],[275,53,295,37],[275,54,295,38],[275,55,295,39],[275,57,296,35],[276,4,297,2],[276,8,297,6],[276,9,297,7,"ExponentFileSystem"],[276,36,297,25],[276,37,297,26,"uploadAsync"],[276,48,297,37],[276,50,297,39],[277,6,298,4],[277,12,298,10],[277,16,298,14,"UnavailabilityError"],[277,52,298,33],[277,53,298,34],[277,71,298,52],[277,73,298,54],[277,86,298,67],[277,87,298,68],[278,4,299,2],[279,4,301,2],[279,11,301,9],[279,17,301,15,"ExponentFileSystem"],[279,44,301,33],[279,45,301,34,"uploadAsync"],[279,56,301,45],[279,57,301,46,"url"],[279,60,301,49],[279,62,301,51,"fileUri"],[279,69,301,58],[279,71,301,60],[280,6,302,4,"sessionType"],[280,17,302,15],[280,19,302,17,"FileSystemSessionType"],[280,52,302,38],[280,53,302,39,"BACKGROUND"],[280,63,302,49],[281,6,303,4,"uploadType"],[281,16,303,14],[281,18,303,16,"FileSystemUploadType"],[281,50,303,36],[281,51,303,37,"BINARY_CONTENT"],[281,65,303,51],[282,6,304,4],[282,9,304,7,"options"],[282,16,304,14],[283,6,305,4,"httpMethod"],[283,16,305,14],[283,18,305,16],[283,19,305,17,"options"],[283,26,305,24],[283,27,305,25,"httpMethod"],[283,37,305,35],[283,41,305,39],[283,47,305,45],[283,49,305,47,"toUpperCase"],[283,60,305,58],[283,61,305,59],[284,4,306,2],[284,5,306,3],[284,6,306,4],[285,2,307,0],[287,2,309,0],[288,0,310,0],[289,0,311,0],[290,0,312,0],[291,0,313,0],[292,0,314,0],[293,0,315,0],[294,0,316,0],[295,0,317,0],[296,0,318,0],[297,0,319,0],[298,0,320,0],[299,0,321,0],[300,0,322,0],[301,0,323,0],[302,0,324,0],[303,2,325,7],[303,11,325,16,"createDownloadResumable"],[303,34,325,39,"createDownloadResumable"],[303,35,326,2,"uri"],[303,38,326,13],[303,40,327,2,"fileUri"],[303,47,327,17],[303,49,328,2,"options"],[303,56,328,27],[303,58,329,2,"callback"],[303,66,329,72],[303,68,330,2,"resumeData"],[303,78,330,21],[303,80,331,21],[304,4,332,2],[304,11,332,9],[304,15,332,13,"DownloadResumable"],[304,32,332,30],[304,33,332,31,"uri"],[304,36,332,34],[304,38,332,36,"fileUri"],[304,45,332,43],[304,47,332,45,"options"],[304,54,332,52],[304,56,332,54,"callback"],[304,64,332,62],[304,66,332,64,"resumeData"],[304,76,332,74],[304,77,332,75],[305,2,333,0],[306,2,335,7],[306,11,335,16,"createUploadTask"],[306,27,335,32,"createUploadTask"],[306,28,336,2,"url"],[306,31,336,13],[306,33,337,2,"fileUri"],[306,40,337,17],[306,42,338,2,"options"],[306,49,338,35],[306,51,339,2,"callback"],[306,59,339,70],[306,61,340,14],[307,4,341,2],[307,11,341,9],[307,15,341,13,"UploadTask"],[307,25,341,23],[307,26,341,24,"url"],[307,29,341,27],[307,31,341,29,"fileUri"],[307,38,341,36],[307,40,341,38,"options"],[307,47,341,45],[307,49,341,47,"callback"],[307,57,341,55],[307,58,341,56],[308,2,342,0],[309,2,344,7],[309,8,344,22,"FileSystemCancellableNetworkTask"],[309,40,344,54],[309,41,346,2],[310,4,347,10,"_uuid"],[310,9,347,15],[310,12,347,18,"uuid"],[310,33,347,22],[310,34,347,23,"v4"],[310,36,347,25],[310,37,347,26],[310,38,347,27],[311,4,348,12,"taskWasCanceled"],[311,19,348,27],[311,22,348,30],[311,27,348,35],[312,4,351,2],[313,4,352,2],[313,10,352,15,"cancelAsync"],[313,21,352,26,"cancelAsync"],[313,22,352,26],[313,24,352,44],[314,6,353,4],[314,10,353,8],[314,11,353,9,"ExponentFileSystem"],[314,38,353,27],[314,39,353,28,"networkTaskCancelAsync"],[314,61,353,50],[314,63,353,52],[315,8,354,6],[315,14,354,12],[315,18,354,16,"UnavailabilityError"],[315,54,354,35],[315,55,354,36],[315,73,354,54],[315,75,354,56],[315,99,354,80],[315,100,354,81],[316,6,355,4],[317,6,357,4],[317,10,357,8],[317,11,357,9,"removeSubscription"],[317,29,357,27],[317,30,357,28],[317,31,357,29],[318,6,358,4],[318,10,358,8],[318,11,358,9,"taskWasCanceled"],[318,26,358,24],[318,29,358,27],[318,33,358,31],[319,6,359,4],[319,13,359,11],[319,19,359,17,"ExponentFileSystem"],[319,46,359,35],[319,47,359,36,"networkTaskCancelAsync"],[319,69,359,58],[319,70,359,59],[319,74,359,63],[319,75,359,64,"uuid"],[319,79,359,68],[319,80,359,69],[320,4,360,2],[321,4,362,12,"isTaskCancelled"],[321,19,362,27,"isTaskCancelled"],[321,20,362,27],[321,22,362,39],[322,6,363,4],[322,10,363,8],[322,14,363,12],[322,15,363,13,"taskWasCanceled"],[322,30,363,28],[322,32,363,30],[323,8,364,6,"console"],[323,15,364,13],[323,16,364,14,"warn"],[323,20,364,18],[323,21,364,19],[323,54,364,52],[323,55,364,53],[324,8,365,6],[324,15,365,13],[324,19,365,17],[325,6,366,4],[326,6,368,4],[326,13,368,11],[326,18,368,16],[327,4,369,2],[328,4,371,2],[328,8,371,16,"uuid"],[328,12,371,20,"uuid"],[328,13,371,20],[328,15,371,31],[329,6,372,4],[329,13,372,11],[329,17,372,15],[329,18,372,16,"_uuid"],[329,23,372,21],[330,4,373,2],[331,4,379,12,"addSubscription"],[331,19,379,27,"addSubscription"],[331,20,379,27],[331,22,379,30],[332,6,380,4],[332,10,380,8],[332,14,380,12],[332,15,380,13,"subscription"],[332,27,380,25],[332,29,380,27],[333,8,381,6],[334,6,382,4],[335,6,384,4],[335,10,384,8],[335,11,384,9,"subscription"],[335,23,384,21],[335,26,384,24,"ExponentFileSystem"],[335,53,384,42],[335,54,384,43,"addListener"],[335,65,384,54],[335,66,385,6],[335,70,385,10],[335,71,385,11,"getEventName"],[335,83,385,23],[335,84,385,24],[335,85,385,25],[335,87,386,7,"event"],[335,92,386,30],[335,96,386,35],[336,8,387,8],[336,12,387,12,"event"],[336,17,387,17],[336,18,387,18,"uuid"],[336,22,387,22],[336,27,387,27],[336,31,387,31],[336,32,387,32,"uuid"],[336,36,387,36],[336,38,387,38],[337,10,388,10],[337,16,388,16,"callback"],[337,24,388,24],[337,27,388,27],[337,31,388,31],[337,32,388,32,"getCallback"],[337,43,388,43],[337,44,388,44],[337,45,388,45],[338,10,389,10],[338,14,389,14,"callback"],[338,22,389,22],[338,24,389,24],[339,12,390,12,"callback"],[339,20,390,20],[339,21,390,21,"event"],[339,26,390,26],[339,27,390,27,"data"],[339,31,390,36],[339,32,390,37],[340,10,391,10],[341,8,392,8],[342,6,393,6],[342,7,394,4],[342,8,394,5],[343,4,395,2],[344,4,397,12,"removeSubscription"],[344,22,397,30,"removeSubscription"],[344,23,397,30],[344,25,397,33],[345,6,398,4],[345,10,398,8],[345,11,398,9],[345,15,398,13],[345,16,398,14,"subscription"],[345,28,398,26],[345,30,398,28],[346,8,399,6],[347,6,400,4],[348,6,401,4],[348,10,401,8],[348,11,401,9,"subscription"],[348,23,401,21],[348,24,401,22,"remove"],[348,30,401,28],[348,31,401,29],[348,32,401,30],[349,6,402,4],[349,10,402,8],[349,11,402,9,"subscription"],[349,23,402,21],[349,26,402,24],[349,30,402,28],[350,4,403,2],[351,2,404,0],[352,2,404,1,"exports"],[352,9,404,1],[352,10,404,1,"FileSystemCancellableNetworkTask"],[352,42,404,1],[352,45,404,1,"FileSystemCancellableNetworkTask"],[352,77,404,1],[353,2,406,7],[353,8,406,13,"UploadTask"],[353,18,406,23],[353,27,406,32,"FileSystemCancellableNetworkTask"],[353,59,406,64],[353,60,406,85],[354,4,409,2,"constructor"],[354,15,409,13,"constructor"],[354,16,410,12,"url"],[354,19,410,23],[354,21,411,12,"fileUri"],[354,28,411,27],[354,30,412,4,"options"],[354,37,412,37],[354,39,413,12,"callback"],[354,47,413,80],[354,49,414,4],[355,6,415,4],[355,11,415,9],[355,12,415,10],[355,13,415,11],[356,6,415,12],[356,11,410,12,"url"],[356,14,410,23],[356,17,410,12,"url"],[356,20,410,23],[357,6,410,23],[357,11,411,12,"fileUri"],[357,18,411,27],[357,21,411,12,"fileUri"],[357,28,411,27],[358,6,411,27],[358,11,413,12,"callback"],[358,19,413,80],[358,22,413,12,"callback"],[358,30,413,80],[359,6,417,4],[359,12,417,10,"httpMethod"],[359,22,417,20],[359,25,417,24,"options"],[359,32,417,31],[359,34,417,33,"httpMethod"],[359,44,417,43],[359,46,417,45,"toUpperCase"],[359,57,417,56],[359,58,417,57],[359,59,417,58],[359,63,418,6],[359,69,418,51],[360,6,420,4],[360,10,420,8],[360,11,420,9,"options"],[360,18,420,16],[360,21,420,19],[361,8,421,6,"sessionType"],[361,19,421,17],[361,21,421,19,"FileSystemSessionType"],[361,54,421,40],[361,55,421,41,"BACKGROUND"],[361,65,421,51],[362,8,422,6,"uploadType"],[362,18,422,16],[362,20,422,18,"FileSystemUploadType"],[362,52,422,38],[362,53,422,39,"BINARY_CONTENT"],[362,67,422,53],[363,8,423,6],[363,11,423,9,"options"],[363,18,423,16],[364,8,424,6,"httpMethod"],[365,6,425,4],[365,7,425,5],[366,4,426,2],[367,4,428,12,"getEventName"],[367,16,428,24,"getEventName"],[367,17,428,24],[367,19,428,35],[368,6,429,4],[368,13,429,11],[368,46,429,44],[369,4,430,2],[370,4,431,12,"getCallback"],[370,15,431,23,"getCallback"],[370,16,431,23],[370,18,431,97],[371,6,432,4],[371,13,432,11],[371,17,432,15],[371,18,432,16,"callback"],[371,26,432,24],[372,4,433,2],[374,4,435,2],[375,4,436,2],[375,10,436,15,"uploadAsync"],[375,21,436,26,"uploadAsync"],[375,22,436,26],[375,24,436,81],[376,6,437,4],[376,10,437,8],[376,11,437,9,"ExponentFileSystem"],[376,38,437,27],[376,39,437,28,"uploadTaskStartAsync"],[376,59,437,48],[376,61,437,50],[377,8,438,6],[377,14,438,12],[377,18,438,16,"UnavailabilityError"],[377,54,438,35],[377,55,438,36],[377,73,438,54],[377,75,438,56],[377,97,438,78],[377,98,438,79],[378,6,439,4],[379,6,441,4],[379,10,441,8],[379,14,441,12],[379,15,441,13,"isTaskCancelled"],[379,30,441,28],[379,31,441,29],[379,32,441,30],[379,34,441,32],[380,8,442,6],[381,6,443,4],[382,6,445,4],[382,10,445,8],[382,11,445,9,"addSubscription"],[382,26,445,24],[382,27,445,25],[382,28,445,26],[383,6,446,4],[383,12,446,10,"result"],[383,18,446,16],[383,21,446,19],[383,27,446,25,"ExponentFileSystem"],[383,54,446,43],[383,55,446,44,"uploadTaskStartAsync"],[383,75,446,64],[383,76,447,6],[383,80,447,10],[383,81,447,11,"url"],[383,84,447,14],[383,86,448,6],[383,90,448,10],[383,91,448,11,"fileUri"],[383,98,448,18],[383,100,449,6],[383,104,449,10],[383,105,449,11,"uuid"],[383,109,449,15],[383,111,450,6],[383,115,450,10],[383,116,450,11,"options"],[383,123,451,4],[383,124,451,5],[384,6,452,4],[384,10,452,8],[384,11,452,9,"removeSubscription"],[384,29,452,27],[384,30,452,28],[384,31,452,29],[385,6,454,4],[385,13,454,11,"result"],[385,19,454,17],[386,4,455,2],[387,2,456,0],[388,2,456,1,"exports"],[388,9,456,1],[388,10,456,1,"UploadTask"],[388,20,456,1],[388,23,456,1,"UploadTask"],[388,33,456,1],[389,2,458,7],[389,8,458,13,"DownloadResumable"],[389,25,458,30],[389,34,458,39,"FileSystemCancellableNetworkTask"],[389,66,458,71],[389,67,458,94],[390,4,459,2,"constructor"],[390,15,459,13,"constructor"],[390,16,460,12,"url"],[390,19,460,23],[390,21,461,12,"_fileUri"],[390,29,461,28],[390,31,462,12,"options"],[390,38,462,36],[390,41,462,39],[390,42,462,40],[390,43,462,41],[390,45,463,12,"callback"],[390,53,463,82],[390,55,464,12,"resumeData"],[390,65,464,31],[390,67,465,4],[391,6,466,4],[391,11,466,9],[391,12,466,10],[391,13,466,11],[392,6,466,12],[392,11,460,12,"url"],[392,14,460,23],[392,17,460,12,"url"],[392,20,460,23],[393,6,460,23],[393,11,461,12,"_fileUri"],[393,19,461,28],[393,22,461,12,"_fileUri"],[393,30,461,28],[394,6,461,28],[394,11,462,12,"options"],[394,18,462,36],[394,21,462,12,"options"],[394,28,462,36],[395,6,462,36],[395,11,463,12,"callback"],[395,19,463,82],[395,22,463,12,"callback"],[395,30,463,82],[396,6,463,82],[396,11,464,12,"resumeData"],[396,21,464,31],[396,24,464,12,"resumeData"],[396,34,464,31],[397,4,467,2],[398,4,469,2],[398,8,469,13,"fileUri"],[398,15,469,20,"fileUri"],[398,16,469,20],[398,18,469,31],[399,6,470,4],[399,13,470,11],[399,17,470,15],[399,18,470,16,"_fileUri"],[399,26,470,24],[400,4,471,2],[401,4,473,12,"getEventName"],[401,16,473,24,"getEventName"],[401,17,473,24],[401,19,473,35],[402,6,474,4],[402,13,474,11],[402,48,474,46],[403,4,475,2],[404,4,477,12,"getCallback"],[404,15,477,23,"getCallback"],[404,16,477,23],[404,18,477,99],[405,6,478,4],[405,13,478,11],[405,17,478,15],[405,18,478,16,"callback"],[405,26,478,24],[406,4,479,2],[408,4,481,2],[409,0,482,0],[410,0,483,0],[411,0,484,0],[412,4,485,2],[412,10,485,8,"downloadAsync"],[412,23,485,21,"downloadAsync"],[412,24,485,21],[412,26,485,71],[413,6,486,4],[413,10,486,8],[413,11,486,9,"ExponentFileSystem"],[413,38,486,27],[413,39,486,28,"downloadResumableStartAsync"],[413,66,486,55],[413,68,486,57],[414,8,487,6],[414,14,487,12],[414,18,487,16,"UnavailabilityError"],[414,54,487,35],[414,55,487,36],[414,73,487,54],[414,75,487,56],[414,104,487,85],[414,105,487,86],[415,6,488,4],[416,6,490,4],[416,10,490,8],[416,14,490,12],[416,15,490,13,"isTaskCancelled"],[416,30,490,28],[416,31,490,29],[416,32,490,30],[416,34,490,32],[417,8,491,6],[418,6,492,4],[419,6,494,4],[419,10,494,8],[419,11,494,9,"addSubscription"],[419,26,494,24],[419,27,494,25],[419,28,494,26],[420,6,495,4],[420,13,495,11],[420,19,495,17,"ExponentFileSystem"],[420,46,495,35],[420,47,495,36,"downloadResumableStartAsync"],[420,74,495,63],[420,75,496,6],[420,79,496,10],[420,80,496,11,"url"],[420,83,496,14],[420,85,497,6],[420,89,497,10],[420,90,497,11,"_fileUri"],[420,98,497,19],[420,100,498,6],[420,104,498,10],[420,105,498,11,"uuid"],[420,109,498,15],[420,111,499,6],[420,115,499,10],[420,116,499,11,"options"],[420,123,499,18],[420,125,500,6],[420,129,500,10],[420,130,500,11,"resumeData"],[420,140,501,4],[420,141,501,5],[421,4,502,2],[423,4,504,2],[424,0,505,0],[425,0,506,0],[426,0,507,0],[427,0,508,0],[428,4,509,2],[428,10,509,8,"pauseAsync"],[428,20,509,18,"pauseAsync"],[428,21,509,18],[428,23,509,50],[429,6,510,4],[429,10,510,8],[429,11,510,9,"ExponentFileSystem"],[429,38,510,27],[429,39,510,28,"downloadResumablePauseAsync"],[429,66,510,55],[429,68,510,57],[430,8,511,6],[430,14,511,12],[430,18,511,16,"UnavailabilityError"],[430,54,511,35],[430,55,511,36],[430,73,511,54],[430,75,511,56],[430,104,511,85],[430,105,511,86],[431,6,512,4],[432,6,514,4],[432,10,514,8],[432,14,514,12],[432,15,514,13,"isTaskCancelled"],[432,30,514,28],[432,31,514,29],[432,32,514,30],[432,34,514,32],[433,8,515,6],[433,15,515,13],[434,10,516,8,"fileUri"],[434,17,516,15],[434,19,516,17],[434,23,516,21],[434,24,516,22,"_fileUri"],[434,32,516,30],[435,10,517,8,"options"],[435,17,517,15],[435,19,517,17],[435,23,517,21],[435,24,517,22,"options"],[435,31,517,29],[436,10,518,8,"url"],[436,13,518,11],[436,15,518,13],[436,19,518,17],[436,20,518,18,"url"],[437,8,519,6],[437,9,519,7],[438,6,520,4],[439,6,522,4],[439,12,522,10,"pauseResult"],[439,23,522,21],[439,26,522,24],[439,32,522,30,"ExponentFileSystem"],[439,59,522,48],[439,60,522,49,"downloadResumablePauseAsync"],[439,87,522,76],[439,88,522,77],[439,92,522,81],[439,93,522,82,"uuid"],[439,97,522,86],[439,98,522,87],[440,6,523,4],[440,10,523,8],[440,11,523,9,"removeSubscription"],[440,29,523,27],[440,30,523,28],[440,31,523,29],[441,6,524,4],[441,10,524,8,"pauseResult"],[441,21,524,19],[441,23,524,21],[442,8,525,6],[442,12,525,10],[442,13,525,11,"resumeData"],[442,23,525,21],[442,26,525,24,"pauseResult"],[442,37,525,35],[442,38,525,36,"resumeData"],[442,48,525,46],[443,8,526,6],[443,15,526,13],[443,19,526,17],[443,20,526,18,"savable"],[443,27,526,25],[443,28,526,26],[443,29,526,27],[444,6,527,4],[444,7,527,5],[444,13,527,11],[445,8,528,6],[445,14,528,12],[445,18,528,16,"Error"],[445,23,528,21],[445,24,528,22],[445,66,528,64],[445,67,528,65],[446,6,529,4],[447,4,530,2],[449,4,532,2],[450,0,533,0],[451,0,534,0],[452,0,535,0],[453,4,536,2],[453,10,536,8,"resumeAsync"],[453,21,536,19,"resumeAsync"],[453,22,536,19],[453,24,536,69],[454,6,537,4],[454,10,537,8],[454,11,537,9,"ExponentFileSystem"],[454,38,537,27],[454,39,537,28,"downloadResumableStartAsync"],[454,66,537,55],[454,68,537,57],[455,8,538,6],[455,14,538,12],[455,18,538,16,"UnavailabilityError"],[455,54,538,35],[455,55,538,36],[455,73,538,54],[455,75,538,56],[455,104,538,85],[455,105,538,86],[456,6,539,4],[457,6,541,4],[457,10,541,8],[457,14,541,12],[457,15,541,13,"isTaskCancelled"],[457,30,541,28],[457,31,541,29],[457,32,541,30],[457,34,541,32],[458,8,542,6],[459,6,543,4],[460,6,545,4],[460,10,545,8],[460,11,545,9,"addSubscription"],[460,26,545,24],[460,27,545,25],[460,28,545,26],[461,6,546,4],[461,13,546,11],[461,19,546,17,"ExponentFileSystem"],[461,46,546,35],[461,47,546,36,"downloadResumableStartAsync"],[461,74,546,63],[461,75,547,6],[461,79,547,10],[461,80,547,11,"url"],[461,83,547,14],[461,85,548,6],[461,89,548,10],[461,90,548,11,"fileUri"],[461,97,548,18],[461,99,549,6],[461,103,549,10],[461,104,549,11,"uuid"],[461,108,549,15],[461,110,550,6],[461,114,550,10],[461,115,550,11,"options"],[461,122,550,18],[461,124,551,6],[461,128,551,10],[461,129,551,11,"resumeData"],[461,139,552,4],[461,140,552,5],[462,4,553,2],[464,4,555,2],[465,0,556,0],[466,0,557,0],[467,0,558,0],[468,4,559,2,"savable"],[468,11,559,9,"savable"],[468,12,559,9],[468,14,559,32],[469,6,560,4],[469,13,560,11],[470,8,561,6,"url"],[470,11,561,9],[470,13,561,11],[470,17,561,15],[470,18,561,16,"url"],[470,21,561,19],[471,8,562,6,"fileUri"],[471,15,562,13],[471,17,562,15],[471,21,562,19],[471,22,562,20,"fileUri"],[471,29,562,27],[472,8,563,6,"options"],[472,15,563,13],[472,17,563,15],[472,21,563,19],[472,22,563,20,"options"],[472,29,563,27],[473,8,564,6,"resumeData"],[473,18,564,16],[473,20,564,18],[473,24,564,22],[473,25,564,23,"resumeData"],[474,6,565,4],[474,7,565,5],[475,4,566,2],[476,2,567,0],[477,2,567,1,"exports"],[477,9,567,1],[477,10,567,1,"DownloadResumable"],[477,27,567,1],[477,30,567,1,"DownloadResumable"],[477,47,567,1],[478,2,569,0],[478,8,569,6,"baseReadAsStringAsync"],[478,29,569,27],[478,32,569,30,"readAsStringAsync"],[478,49,569,47],[479,2,570,0],[479,8,570,6,"baseWriteAsStringAsync"],[479,30,570,28],[479,33,570,31,"writeAsStringAsync"],[479,51,570,49],[480,2,571,0],[480,8,571,6,"baseDeleteAsync"],[480,23,571,21],[480,26,571,24,"deleteAsync"],[480,37,571,35],[481,2,572,0],[481,8,572,6,"baseMoveAsync"],[481,21,572,19],[481,24,572,22,"moveAsync"],[481,33,572,31],[482,2,573,0],[482,8,573,6,"baseCopyAsync"],[482,21,573,19],[482,24,573,22,"copyAsync"],[482,33,573,31],[484,2,575,0],[485,0,576,0],[486,0,577,0],[487,0,578,0],[488,0,579,0],[489,0,580,0],[490,0,581,0],[491,0,582,0],[492,0,583,0],[493,0,584,0],[494,0,585,0],[495,0,586,0],[496,0,587,0],[497,0,588,0],[498,0,589,0],[499,0,590,0],[500,0,591,0],[501,0,592,0],[502,0,593,0],[503,0,594,0],[504,0,595,0],[505,0,596,0],[506,0,597,0],[507,0,598,0],[508,0,599,0],[509,0,600,0],[510,0,601,0],[511,0,602,0],[512,0,603,0],[513,0,604,0],[514,0,605,0],[515,0,606,0],[516,0,607,0],[517,0,608,0],[518,0,609,0],[519,0,610,0],[520,0,611,0],[521,0,612,0],[522,0,613,0],[523,0,614,0],[524,0,615,0],[525,0,616,0],[526,0,617,0],[527,0,618,0],[528,0,619,0],[529,0,620,0],[530,0,621,0],[531,0,622,0],[532,0,623,0],[533,0,624,0],[534,0,625,0],[535,0,626,0],[536,0,627,0],[537,0,628,0],[538,0,629,0],[539,0,630,0],[540,0,631,0],[541,0,632,0],[542,0,633,0],[543,0,634,0],[544,0,635,0],[545,0,636,0],[546,0,637,0],[547,0,638,0],[548,0,639,0],[549,0,640,0],[550,0,641,0],[551,0,642,0],[552,0,643,0],[553,0,644,0],[554,0,645,0],[555,0,646,0],[556,0,647,0],[557,0,648,0],[558,0,649,0],[559,0,650,0],[560,0,651,0],[561,0,652,0],[562,0,653,0],[563,0,654,0],[564,0,655,0],[565,2,575,0],[565,6,656,17,"StorageAccessFramework"],[565,28,656,39],[565,31,656,39,"exports"],[565,38,656,39],[565,39,656,39,"StorageAccessFramework"],[565,61,656,39],[566,2,656,39],[566,13,656,39,"_StorageAccessFramework"],[566,36,656,39],[567,4,664,9],[567,13,664,18,"getUriForDirectoryInRoot"],[567,37,664,42,"getUriForDirectoryInRoot"],[567,38,664,43,"folderName"],[567,48,664,61],[567,50,664,63],[568,6,665,4],[568,13,665,11],[568,77,665,75,"folderName"],[568,87,665,85],[568,108,665,106,"folderName"],[568,118,665,116],[568,120,665,118],[569,4,666,2],[570,4,666,3,"_StorageAccessFramework"],[570,27,666,3],[570,28,666,3,"getUriForDirectoryInRoot"],[570,52,666,3],[570,55,666,3,"getUriForDirectoryInRoot"],[570,79,666,3],[571,4,675,9],[571,19,675,24,"requestDirectoryPermissionsAsync"],[571,51,675,56,"requestDirectoryPermissionsAsync"],[571,52,676,4,"initialFileUrl"],[571,66,676,33],[571,69,676,36],[571,73,676,40],[571,75,677,58],[572,6,678,4],[572,10,678,8],[572,11,678,9,"ExponentFileSystem"],[572,38,678,27],[572,39,678,28,"requestDirectoryPermissionsAsync"],[572,71,678,60],[572,73,678,62],[573,8,679,6],[573,14,679,12],[573,18,679,16,"UnavailabilityError"],[573,54,679,35],[573,55,680,8],[573,73,680,26],[573,75,681,8],[573,132,682,6],[573,133,682,7],[574,6,683,4],[575,6,685,4],[575,13,685,11],[575,19,685,17,"ExponentFileSystem"],[575,46,685,35],[575,47,685,36,"requestDirectoryPermissionsAsync"],[575,79,685,68],[575,80,685,69,"initialFileUrl"],[575,94,685,83],[575,95,685,84],[576,4,686,2],[577,4,686,3,"_StorageAccessFramework"],[577,27,686,3],[577,28,686,3,"requestDirectoryPermissionsAsync"],[577,60,686,3],[577,63,686,3,"requestDirectoryPermissionsAsync"],[577,95,686,3],[578,4,694,9],[578,19,694,24,"readDirectoryAsync"],[578,37,694,42,"readDirectoryAsync"],[578,38,694,43,"dirUri"],[578,44,694,57],[578,46,694,78],[579,6,695,4],[579,10,695,8],[579,11,695,9,"ExponentFileSystem"],[579,38,695,27],[579,39,695,28,"readSAFDirectoryAsync"],[579,60,695,49],[579,62,695,51],[580,8,696,6],[580,14,696,12],[580,18,696,16,"UnavailabilityError"],[580,54,696,35],[580,55,697,8],[580,73,697,26],[580,75,698,8],[580,118,699,6],[580,119,699,7],[581,6,700,4],[582,6,701,4],[582,13,701,11],[582,19,701,17,"ExponentFileSystem"],[582,46,701,35],[582,47,701,36,"readSAFDirectoryAsync"],[582,68,701,57],[582,69,701,58,"dirUri"],[582,75,701,64],[582,76,701,65],[583,4,702,2],[584,4,702,3,"_StorageAccessFramework"],[584,27,702,3],[584,28,702,3,"readDirectoryAsync"],[584,46,702,3],[584,49,702,3,"readDirectoryAsync"],[584,67,702,3],[585,4,711,9],[585,19,711,24,"makeDirectoryAsync"],[585,37,711,42,"makeDirectoryAsync"],[585,38,711,43,"parentUri"],[585,47,711,60],[585,49,711,62,"dirName"],[585,56,711,77],[585,58,711,96],[586,6,712,4],[586,10,712,8],[586,11,712,9,"ExponentFileSystem"],[586,38,712,27],[586,39,712,28,"makeSAFDirectoryAsync"],[586,60,712,49],[586,62,712,51],[587,8,713,6],[587,14,713,12],[587,18,713,16,"UnavailabilityError"],[587,54,713,35],[587,55,714,8],[587,73,714,26],[587,75,715,8],[587,118,716,6],[587,119,716,7],[588,6,717,4],[589,6,718,4],[589,13,718,11],[589,19,718,17,"ExponentFileSystem"],[589,46,718,35],[589,47,718,36,"makeSAFDirectoryAsync"],[589,68,718,57],[589,69,718,58,"parentUri"],[589,78,718,67],[589,80,718,69,"dirName"],[589,87,718,76],[589,88,718,77],[590,4,719,2],[591,4,719,3,"_StorageAccessFramework"],[591,27,719,3],[591,28,719,3,"makeDirectoryAsync"],[591,46,719,3],[591,49,719,3,"makeDirectoryAsync"],[591,67,719,3],[592,4,729,9],[592,19,729,24,"createFileAsync"],[592,34,729,39,"createFileAsync"],[592,35,730,4,"parentUri"],[592,44,730,21],[592,46,731,4,"fileName"],[592,54,731,20],[592,56,732,4,"mimeType"],[592,64,732,20],[592,66,733,21],[593,6,734,4],[593,10,734,8],[593,11,734,9,"ExponentFileSystem"],[593,38,734,27],[593,39,734,28,"createSAFFileAsync"],[593,57,734,46],[593,59,734,48],[594,8,735,6],[594,14,735,12],[594,18,735,16,"UnavailabilityError"],[594,54,735,35],[594,55,735,36],[594,73,735,54],[594,75,735,56],[594,115,735,96],[594,116,735,97],[595,6,736,4],[596,6,737,4],[596,13,737,11],[596,19,737,17,"ExponentFileSystem"],[596,46,737,35],[596,47,737,36,"createSAFFileAsync"],[596,65,737,54],[596,66,737,55,"parentUri"],[596,75,737,64],[596,77,737,66,"fileName"],[596,85,737,74],[596,87,737,76,"mimeType"],[596,95,737,84],[596,96,737,85],[597,4,738,2],[598,4,738,3,"_StorageAccessFramework"],[598,27,738,3],[598,28,738,3,"createFileAsync"],[598,43,738,3],[598,46,738,3,"createFileAsync"],[598,61,738,3],[599,4,743,9],[599,10,743,15,"writeAsStringAsync"],[599,28,743,33],[599,31,743,33,"_StorageAccessFramework"],[599,54,743,33],[599,55,743,33,"writeAsStringAsync"],[599,73,743,33],[599,76,743,36,"baseWriteAsStringAsync"],[599,98,743,58],[600,4,747,9],[600,10,747,15,"readAsStringAsync"],[600,27,747,32],[600,30,747,32,"_StorageAccessFramework"],[600,53,747,32],[600,54,747,32,"readAsStringAsync"],[600,71,747,32],[600,74,747,35,"baseReadAsStringAsync"],[600,95,747,56],[601,4,751,9],[601,10,751,15,"deleteAsync"],[601,21,751,26],[601,24,751,26,"_StorageAccessFramework"],[601,47,751,26],[601,48,751,26,"deleteAsync"],[601,59,751,26],[601,62,751,29,"baseDeleteAsync"],[601,77,751,44],[602,4,755,9],[602,10,755,15,"moveAsync"],[602,19,755,24],[602,22,755,24,"_StorageAccessFramework"],[602,45,755,24],[602,46,755,24,"moveAsync"],[602,55,755,24],[602,58,755,27,"baseMoveAsync"],[602,71,755,40],[603,4,759,9],[603,10,759,15,"copyAsync"],[603,19,759,24],[603,22,759,24,"_StorageAccessFramework"],[603,45,759,24],[603,46,759,24,"copyAsync"],[603,55,759,24],[603,58,759,27,"baseCopyAsync"],[603,71,759,40],[604,2,759,41],[604,5,656,17,"StorageAccessFramework"],[604,27,656,39],[604,32,656,39,"exports"],[604,39,656,39],[604,40,656,39,"StorageAccessFramework"],[604,62,656,39],[604,65,656,17,"StorageAccessFramework"],[604,87,656,39],[605,0,656,39],[605,3]],"functionMap":{"names":["<global>","normalizeEndingSlash","getInfoAsync","readAsStringAsync","getContentUriAsync","writeAsStringAsync","deleteAsync","deleteLegacyDocumentDirectoryAndroid","moveAsync","copyAsync","makeDirectoryAsync","readDirectoryAsync","getFreeDiskStorageAsync","getTotalDiskCapacityAsync","downloadAsync","uploadAsync","createDownloadResumable","createUploadTask","FileSystemCancellableNetworkTask","FileSystemCancellableNetworkTask#cancelAsync","FileSystemCancellableNetworkTask#isTaskCancelled","FileSystemCancellableNetworkTask#get__uuid","FileSystemCancellableNetworkTask#addSubscription","ExponentFileSystem.addListener$argument_1","FileSystemCancellableNetworkTask#removeSubscription","UploadTask","UploadTask#constructor","UploadTask#getEventName","UploadTask#getCallback","UploadTask#uploadAsync","DownloadResumable","DownloadResumable#constructor","DownloadResumable#get__fileUri","DownloadResumable#getEventName","DownloadResumable#getCallback","DownloadResumable#downloadAsync","DownloadResumable#pauseAsync","DownloadResumable#resumeAsync","DownloadResumable#savable","getUriForDirectoryInRoot","requestDirectoryPermissionsAsync","createFileAsync"],"mappings":"AAA;ACiC;CDK;OE4B;CFK;OGQ;CHQ;OImB;CJS;OKS;CLS;OMO;CNK;OOE;CPM;OQM;CRK;OSO;CTK;OUO;CVQ;OWO;CXK;OYM;CZK;OaM;CbK;OcuB;Cda;Oe8B;Cfe;OgBkB;ChBQ;OiBE;CjBO;OkBE;ECQ;GDQ;EEE;GFO;EGE;GHE;EIM;MCO;ODO;GJE;EME;GNM;ClBC;OyBE;ECG;GDiB;EEE;GFE;EGC;GHE;EIG;GJmB;CzBC;O8BE;ECC;GDQ;EEE;GFE;EGE;GHE;EIE;GJE;EKM;GLiB;EMO;GNqB;EOM;GPiB;EQM;GRO;C9BC;SuCiG;GvCE;SwCS;GxCW;SWQ;GXQ;SUS;GVQ;SyCU;GzCS"}},"type":"js/module"}]}